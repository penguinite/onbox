# An example configuration file for Pothole
# Use this as a base for your deployed configuration.

# Note: If you have any double quotes (")in your values then please escape them by backslashing them.
[db]

# This is the default value
# Using a Unix socket is way faster but that
# maybe requires configuring postgres.
# Just add the unix socket to the host key as-is
# if you want to go that route.
#
# Be aware that potholectl dev db and pothole db docker
# were explicitly designed with TCP/IP in mind, so using unix sockets
# might not be supported for those two commands.
host="127.0.0.1:5432"

# Database name
name="pothole"

# Database user login
user="pothole"

# Database user password
# You should avoid passwords with double quotes.
password="SOMETHING_SECRET"

## Instance specific settings

[instance]
# The name of your instance.
# This can be anything (Fx. Church of Penguin)
name="The Penguin Bazaar"

# Your instance's description. There are no specific requirements
# But it is a wise idea to keep it short.
summary="Explore a place of calm, beauty and true social communications."

description="Explore a place of calm, beauty and true social communications. The Penguin Bazaar contains many friendly people to chat with, merchants, customers, sorcerers, witches and many more!"

# This is the domain name that Pothole is running on.
# you should NEVER change it once it's set.
uri="pothole.test"

# This controls whether or not to enable "federation"
# Federation means to share posts with other servers that speak the same protocol (ActivityPub)
# Disabling this means that posts will not automatically be shared with other servers,
# and that other servers cannot share posts with you or your users.
#
# It is highly recommended that you leave this enabled, unless you're using Pothole
# to serve a private community (such as a forum)
# The default value is true.
federated=true


# This is the uri that outgoing ActivityPub JSON payloads will be disguised with.
# If you set this, do not change it, otherwise you will break quite a load of stuff.
# Assuming you set this up correctly, this feature will allow you to host a Pothole instance
# on a subdomain, but somehow let you disguise your posts as coming from whatever other
# subdomain you want.
# For example, you can set up your server on ph.example.com and make it so 
# your posts look like they come from @example.com
# 
# This is still unused however.
disguised_uri="example.com"


# The instance's email address
# If this is not set then it will just show up empty in MastoAPI
# Note: This option does *not* give people admin privileges.
# It simply provides a way for people to contact you (DMCA, abuse reports and so on.)
email="god@example.gov"

# The instance rules.
# You can add whatever you want here.
# If you leave this out then everything related to rules will show up empty
rules=[
    "You may not purchase or offer plastic bags.",
    "Humans are welcome (They are weird looking penguins after all)",
    "No seals, orcas, sea lions, sharks, armadillos, tasmanian devils, skuas, falcons, sheathbills, or petrels! Y'all suck!",
]
#rules=[]

# The logo for the instance.
# This can be left out, it is not required.
# Point it to a file in the static folder.
# So fx. if you have a logo stored as logo.webp then change this to
# static/logo.webp
#logo=""

# TODO: There is another bug with iniplus and parsing keys with empty strings.... Damn it...

# Instance languages
# By default this is ["en"] for English
# But it can be replaced with nothing at all.
languages=[
    "en"
]

# This controls the maximum upload size for remote posts.
# Anything higher will be dropped.
# The size is in megabytes
# Default value is 30
remote_size_limit=30

[web]
# By default Pothole will show instance staff in its website.
# You can disable this to hide it.
show_staff=true

# By default Pothole will show its version in its website.
# You can disable this to hide it.
show_version=true

# Specify which port the web server will
# run on. This is optional and Pothole
# will use 3500 by default
port=3500

# This controls where precisely the Pothole endpoint is.
# For example, if you have a webserver configured to serve https://example.com as a normal page
# and https://example.com/ph/ to Pothole, then you can change this to "/ph/"
# So the API stuff isn't all messed up.
# By default, this is "/"
#
# Oh and, if you don't understand what any of that was, then don't change it :P
endpoint="/"

# Changes the login link to point to somewhere else.
# This is useful for when you have a custom frontend and you want your users to easily log in.
# Default: "/auth/sign_in/"
signin_link="/auth/sign_in/"

# Changes the sign up link to point to somewhere else
# This is useful for when you have a custom frontend (that supports signing up) and you want users to easily log in.
# Default: "/auth/sign_up/"
signup_link="/auth/sign_up/"

# Changes the log out link to point to somewhere else
# This is useful for when you have a custom frontend (that supports signing up) and you want users to easily log in.
# Default: "/auth/logout/"
logout_link="/auth/logout/"

# Whitelist mode
# Restricts public API access to apps with a token.
# Useful for preventing data scrapers, if you care.
# Default: false
whitelist_mode=false

[storage]
# Unused config options

# Pothole supports 2 different storage mechanisms.
# Flat storage: Uploads are handled by Pothole's web server, and copied to the folder configured in storage:upload_folder. Set this to "flat" to enable this.
# Remote proxy: Uploads are magically sent to whatever S3-compatible server you configure. (Incomplete) Set this to "remote" and configure the server to enable this feature.
# Which one is better? Well if it's a server only for you then consider setting up Flat storage *SECURELY*
# If it's for a large server or you wanna join a "media proxy collection" then set up Remote proxy.
#
# By default, Pothole uses flat storage.
type="flat"

# The user uploads directory. Any files uploaded by users will be available here.
# Provided that the storage type is set to flat
# The default value is "uploads/"
upload_folder="uploads/"

# If you have implemented a system such as the one described here: https://webb.spiderden.org/2023/05/26/pleroma-mitigation/
# then you can set this url to the "media server" you have. 
# Pothole will simply append the media it seeks to the end of whatever URL to add here, so:
# https://media.example.com/pothole/ turns into https://media.example.com/pothole/user_id/media_filename/
# If this is not set, then under a default config, Pothole will use the instance:uri option + /media/ like so:
# https://ph.example.com/media/user_id/media_filename/
#upload_uri=""

#type="remote"
#upload_server="uh, idk s3?"
# TODO: Finish the S3 stuff.

# This will be appended on top of upload_uri (or instance:uri + "/media/")
# By default it is default_avatar.webp
default_avatar_location="default_avatar.webp"

# Controls the size limit for user uploads
# Anything higher than this size will be rejected with an error message.
# The size is in megabytes.
# By default this is 30
upload_size_limit=30

[user]
# This option controls whether to enable or disable new user registrations
# This is on by default
registrations_open=true

# This option controls whether to require administrator approval for new
# user registrations.
# This is off by default.
require_approval=false

# This option controls whether or not to require email verification for users
# before logging in or doing anything
#
# By default it's turned off, but we highly recomend that you turn this on.
# Unless you don't have a working email server, in which case, you need to
# either setup one or enable require_approval and keep track of new account requests
require_verification=false

## The following feature is not completely implemented yet.
## I am just establishing a blueprint of what it will look like.

# Maximum number of media attachments for a post
# The default number is 8, this can be left out.
max_attachments=8

# How many characters are users allowed to write in a post.
# It is highly recommended to set this number to something above or equal to 2000.
# Note: Posts over this limit will not be federated.
# You can set it to 0 to disable. (Not recommended)
# The default is 2000 characters
max_chars=2000

# Controls the maximum amount of choices that a user can have in a poll.
# The default is 20.
max_poll_options=20

# Controls the maximum amount of featured tags a user can insert in their profile
# The default is 10
max_featured_tags=10

# Controls how many posts a user can pin to the top of their profiles
# The default is 20
max_pins=20

[email]
# Whether or not email has been enabled.
#
# Note: If the require_verification option has been enabled but this hasn't.
# then you will trap your users in an infinite login loop.
# Disable require_verification or configure the email server.
# Pothole will tell you if you did something wrong though, no worries.
#
# Default: false
enabled=false

# Set this to the address of the email server that you use.
# There is no default, and Pothole *will* error out if this
# is left empty whilst email is enabled.
host=""

# You should change this into the correct port for your email server
# But you could also just brute force it by trying the common ports.
#
# So, here is a list of common ports
# 25 - standard port used for unencrypted SMTP
# 465 - non-standard port used for encrypted SMTP
# 587 - standard port used for encrypted SMTP
# 2525 - used as a backup port, unclear if there's encryption or not.
# See: https://www.cloudflare.com/learning/email-security/smtp-port-25-587/
#
# There is no default, and Pothole *will* error out if this isn't changed
# while email is enabled.
port=0

# You should also change this to the correct sender address
# Pothole *will* error out if this is empty when sending emails.
from=""

# You most likely want to keep this to true.
# Or, actually, it doesn't matter for email verification codes.
# It's just better for privacy if you set this to true.
# 
# You can also set this to "starttls" if your email server uses that.
# So, here's a short summary:
# ssl="false" - Will send emails unencrypted, not recommended as it leaks information.
# ssl="true" - Will send emails encrypted, this is the default value
# ssl="startttls" - Will send emails encrypted with STARTTLS, this should be fine too. If your server supports it.
#
# Make sure to wrap this in quotes, just to be safe.
# Default: true
ssl="true"

# It is *highly* recommended that you setup authentication in your
# email server, otherwise it could be hijacked by spammers
# to send out bulk emails and get your server blocked.
#
# If you have setup authentication then you can add a username
# and password here, if this is empty then Pothole will just not
# bother with authentication, it will still try to send the message though.
user=""
pass=""

[mrf]
# Built-in MRF policies to enable (Array of strings)
# Please read the documentation if you are confused at what each
# policy does.
active_builtin_policies=[
# noop is a simple "dummy" policy that does no rewriting whatsoever.
    "noop" 
]

active_custom_policies=[
    ""
]

# If you have a large MRF policy set then it might make more sense
# to put it in a separate file. So that Pothole does not allocate
# too much memory for MRF policies on every web server thread.
config=""

[mrf.simple]
# Accept *only* from these instances.
# Aka. whitelisting/allowlisting.
# Note: If something comes from a server that *isn't* on this list then it will be rejected.
accept={}

# Reject everything from these instances.
reject={}

# Reject only posts if they originate from these instances
reject_post= {}

# Reject only users if they originate from these instances
reject_user={}

# Reject only activities (such as Likes, Boosts and so on) if they originate from these instances
reject_activity={}

# Hide posts away from the federated timeline if they originate from these instances
quarantine={}

# Mark media NSFW if it originates from these instances.
media_nsfw={}

# Remove all media originating from these instances
media_removal={}

# Remove avatars from users originating from these instances
avatar_removal={}

# Remove headers from users originating from these instances
header_removal={}

[misc]

# TODO: Document undocumented config options
# like template_obj_pool_size or whatever
